/**
 * Copyright (c) 2011 - SEQOY.org and Paulo Oliveira ( http://www.seqoy.org )
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import "JPPipelineNotification.h"

/// /// /// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ///
@implementation JPPipelineNotification
@synthesize name, object, userInfo, cause;

//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 
#pragma mark -
#pragma mark Init Methods. 
//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 
+ (id)init {
	return [[[self alloc] init] autorelease];
}
//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 
- (id) init {
	return self;
}	
//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 
+(id)initWithName:(NSString*)anName {
	JPPipelineNotification *instance = [JPPipelineNotification init];
	///
	instance.name = anName;
	///
	return instance;
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 
#pragma mark -
#pragma mark Methods. 
//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 

-(BOOL)isDone {
	return [self isCancelled] || [self isSuccess] || [self isFailed];													  
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
-(BOOL)isCancelled {
	return cancelled;
}
		
//// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
-(BOOL)isSuccess {
	return success;
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
-(BOOL)isStarted {
	return started && ![self isDone];
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
-(BOOL)isFailed {
	return [self getCause] != nil;
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
-(void)cancel {
	cancelled = YES;
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
-(void)setStarted {
	started = YES;
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
-(void)setSuccess {
	// If done, can't set sucess.
	if ( [self isDone] )
		[NSException raise:@"JPPipelineNotificationException"
					format:@"Can't set success! This action is Done."];
	// Success.
	success = YES;
}

//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 
#pragma mark -
#pragma mark Memory Management Methods. 
//// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// 
- (void) dealloc {
	[name release], name = nil;
	[object release], object = nil;
	[userInfo release], userInfo = nil;
	[cause release], cause = nil;
	[super dealloc];
}

@end
